using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1062 // Validate arguments of public methods - Generated by EF Core
#pragma warning disable IDE0161 // Convert to file-scoped namespace - EF Core generator convention
#pragma warning disable CA1861 // Avoid constant arrays as arguments - Generated by EF Core

namespace HeroSSID.Core.Data.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "dids",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Did = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    Method = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                    EncryptedPrivateKey = table.Column<byte[]>(type: "bytea", nullable: false),
                    PublicKeyJwk = table.Column<string>(type: "character varying(2000)", maxLength: 2000, nullable: false),
                    DidDocument = table.Column<string>(type: "character varying(10000)", maxLength: 10000, nullable: false),
                    Alias = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    IsActive = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true),
                    CreatedAt = table.Column<DateTimeOffset>(type: "timestamp with time zone", nullable: false),
                    LastUsedAt = table.Column<DateTimeOffset>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dids", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "credentials",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Jwt = table.Column<string>(type: "character varying(10000)", maxLength: 10000, nullable: false),
                    IssuerDidId = table.Column<Guid>(type: "uuid", nullable: false),
                    SubjectDidId = table.Column<Guid>(type: "uuid", nullable: false),
                    CredentialType = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    CredentialSubject = table.Column<string>(type: "character varying(10000)", maxLength: 10000, nullable: false),
                    IssuedAt = table.Column<DateTimeOffset>(type: "timestamp with time zone", nullable: false),
                    ExpiresAt = table.Column<DateTimeOffset>(type: "timestamp with time zone", nullable: true),
                    IsRevoked = table.Column<bool>(type: "boolean", nullable: false, defaultValue: false),
                    RevokedAt = table.Column<DateTimeOffset>(type: "timestamp with time zone", nullable: true),
                    CreatedAt = table.Column<DateTimeOffset>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_credentials", x => x.Id);
                    table.ForeignKey(
                        name: "FK_credentials_dids_IssuerDidId",
                        column: x => x.IssuerDidId,
                        principalTable: "dids",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_credentials_dids_SubjectDidId",
                        column: x => x.SubjectDidId,
                        principalTable: "dids",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_credentials_CredentialType",
                table: "credentials",
                column: "CredentialType");

            migrationBuilder.CreateIndex(
                name: "IX_credentials_IsRevoked",
                table: "credentials",
                column: "IsRevoked");

            migrationBuilder.CreateIndex(
                name: "IX_credentials_IssuedAt",
                table: "credentials",
                column: "IssuedAt");

            migrationBuilder.CreateIndex(
                name: "IX_credentials_IssuerDidId_IssuedAt",
                table: "credentials",
                columns: new[] { "IssuerDidId", "IssuedAt" });

            migrationBuilder.CreateIndex(
                name: "IX_credentials_SubjectDidId_IssuedAt",
                table: "credentials",
                columns: new[] { "SubjectDidId", "IssuedAt" });

            migrationBuilder.CreateIndex(
                name: "IX_dids_Alias",
                table: "dids",
                column: "Alias");

            migrationBuilder.CreateIndex(
                name: "IX_dids_Did",
                table: "dids",
                column: "Did",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "credentials");

            migrationBuilder.DropTable(
                name: "dids");
        }
    }
}

// <auto-generated />
using System;
using HeroSSID.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HeroSSID.Core.Data.Migrations
{
    [DbContext(typeof(HeroSSIDDbContext))]
    [Migration("20251015145516_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HeroSSID.Core.Entities.CredentialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CredentialSubject")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("CredentialType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IssuerDidId")
                        .HasColumnType("uuid");

                    b.Property<string>("Jwt")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SubjectDidId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CredentialType");

                    b.HasIndex("IsRevoked");

                    b.HasIndex("IssuedAt");

                    b.HasIndex("IssuerDidId", "IssuedAt");

                    b.HasIndex("SubjectDidId", "IssuedAt");

                    b.ToTable("credentials", (string)null);
                });

            modelBuilder.Entity("HeroSSID.Core.Entities.DidEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Did")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DidDocument")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<byte[]>("EncryptedPrivateKey")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PublicKeyJwk")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("Alias");

                    b.HasIndex("Did")
                        .IsUnique();

                    b.ToTable("dids", (string)null);
                });

            modelBuilder.Entity("HeroSSID.Core.Entities.CredentialEntity", b =>
                {
                    b.HasOne("HeroSSID.Core.Entities.DidEntity", "IssuerDid")
                        .WithMany("IssuedCredentials")
                        .HasForeignKey("IssuerDidId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HeroSSID.Core.Entities.DidEntity", "SubjectDid")
                        .WithMany("ReceivedCredentials")
                        .HasForeignKey("SubjectDidId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IssuerDid");

                    b.Navigation("SubjectDid");
                });

            modelBuilder.Entity("HeroSSID.Core.Entities.DidEntity", b =>
                {
                    b.Navigation("IssuedCredentials");

                    b.Navigation("ReceivedCredentials");
                });
#pragma warning restore 612, 618
        }
    }
}

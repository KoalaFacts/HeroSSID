using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1062 // Validate arguments of public methods - Generated by EF Core
#pragma warning disable IDE0161 // Convert to file-scoped namespace - EF Core generator convention
#pragma warning disable CA1861 // Avoid constant arrays as arguments - Generated by EF Core
#pragma warning disable CA1825 // Avoid zero-length array allocations - Generated by EF Core

namespace HeroSSID.Data.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "dids",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    tenant_id = table.Column<Guid>(type: "uuid", nullable: false),
                    did_identifier = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                    public_key_ed25519 = table.Column<byte[]>(type: "bytea", nullable: false),
                    private_key_ed25519_encrypted = table.Column<byte[]>(type: "bytea", nullable: false),
                    did_document_json = table.Column<string>(type: "jsonb", nullable: false),
                    status = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false, defaultValue: "active"),
                    created_at = table.Column<DateTimeOffset>(type: "timestamptz", nullable: false, defaultValueSql: "NOW()")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_dids", x => x.id);
                    table.CheckConstraint("chk_did_status", "status IN ('active', 'deactivated')");
                });

            migrationBuilder.CreateTable(
                name: "credential_schemas",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    tenant_id = table.Column<Guid>(type: "uuid", nullable: false),
                    schema_name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    schema_version = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    attributes = table.Column<string[]>(type: "text[]", nullable: false),
                    ledger_schema_id = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                    publisher_did_id = table.Column<Guid>(type: "uuid", nullable: false),
                    created_at = table.Column<DateTimeOffset>(type: "timestamptz", nullable: false, defaultValueSql: "NOW()")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_credential_schemas", x => x.id);
                    table.CheckConstraint("chk_schema_version_format", "schema_version ~ '^\\d+\\.\\d+(\\.\\d+)?$'");
                    table.ForeignKey(
                        name: "fk_schemas_publisher",
                        column: x => x.publisher_did_id,
                        principalTable: "dids",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "credential_definitions",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    tenant_id = table.Column<Guid>(type: "uuid", nullable: false),
                    schema_id = table.Column<Guid>(type: "uuid", nullable: false),
                    issuer_did_id = table.Column<Guid>(type: "uuid", nullable: false),
                    ledger_cred_def_id = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                    supports_revocation = table.Column<bool>(type: "boolean", nullable: false, defaultValue: false),
                    created_at = table.Column<DateTimeOffset>(type: "timestamptz", nullable: false, defaultValueSql: "NOW()")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_credential_definitions", x => x.id);
                    table.ForeignKey(
                        name: "fk_cred_defs_issuer",
                        column: x => x.issuer_did_id,
                        principalTable: "dids",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "fk_cred_defs_schema",
                        column: x => x.schema_id,
                        principalTable: "credential_schemas",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "verifiable_credentials",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    tenant_id = table.Column<Guid>(type: "uuid", nullable: false),
                    issuer_did_id = table.Column<Guid>(type: "uuid", nullable: false),
                    holder_did_id = table.Column<Guid>(type: "uuid", nullable: false),
                    schema_id = table.Column<Guid>(type: "uuid", nullable: false),
                    credential_definition_id = table.Column<Guid>(type: "uuid", nullable: false),
                    credential_json = table.Column<string>(type: "jsonb", nullable: false),
                    issued_at = table.Column<DateTimeOffset>(type: "timestamptz", nullable: false, defaultValueSql: "NOW()"),
                    expires_at = table.Column<DateTimeOffset>(type: "timestamptz", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_verifiable_credentials", x => x.id);
                    table.CheckConstraint("chk_credentials_expiration", "expires_at IS NULL OR expires_at > issued_at");
                    table.ForeignKey(
                        name: "fk_credentials_cred_def",
                        column: x => x.credential_definition_id,
                        principalTable: "credential_definitions",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "fk_credentials_holder",
                        column: x => x.holder_did_id,
                        principalTable: "dids",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "fk_credentials_issuer",
                        column: x => x.issuer_did_id,
                        principalTable: "dids",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "fk_credentials_schema",
                        column: x => x.schema_id,
                        principalTable: "credential_schemas",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "idx_cred_defs_issuer",
                table: "credential_definitions",
                column: "issuer_did_id");

            migrationBuilder.CreateIndex(
                name: "idx_cred_defs_ledger_id",
                table: "credential_definitions",
                column: "ledger_cred_def_id",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "idx_cred_defs_schema",
                table: "credential_definitions",
                column: "schema_id");

            migrationBuilder.CreateIndex(
                name: "idx_cred_defs_tenant",
                table: "credential_definitions",
                column: "tenant_id");

            migrationBuilder.CreateIndex(
                name: "idx_schemas_ledger_id",
                table: "credential_schemas",
                column: "ledger_schema_id",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "idx_schemas_name_version",
                table: "credential_schemas",
                columns: new[] { "schema_name", "schema_version" });

            migrationBuilder.CreateIndex(
                name: "idx_schemas_publisher",
                table: "credential_schemas",
                column: "publisher_did_id");

            migrationBuilder.CreateIndex(
                name: "idx_schemas_tenant",
                table: "credential_schemas",
                column: "tenant_id");

            migrationBuilder.CreateIndex(
                name: "idx_dids_identifier",
                table: "dids",
                column: "did_identifier",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "idx_dids_status",
                table: "dids",
                column: "status");

            migrationBuilder.CreateIndex(
                name: "idx_dids_tenant",
                table: "dids",
                column: "tenant_id");

            migrationBuilder.CreateIndex(
                name: "idx_credentials_cred_def",
                table: "verifiable_credentials",
                column: "credential_definition_id");

            migrationBuilder.CreateIndex(
                name: "idx_credentials_expires_at",
                table: "verifiable_credentials",
                column: "expires_at",
                filter: "expires_at IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "idx_credentials_holder",
                table: "verifiable_credentials",
                column: "holder_did_id");

            migrationBuilder.CreateIndex(
                name: "idx_credentials_issued_at",
                table: "verifiable_credentials",
                column: "issued_at",
                descending: new bool[0]);

            migrationBuilder.CreateIndex(
                name: "idx_credentials_issuer",
                table: "verifiable_credentials",
                column: "issuer_did_id");

            migrationBuilder.CreateIndex(
                name: "idx_credentials_schema",
                table: "verifiable_credentials",
                column: "schema_id");

            migrationBuilder.CreateIndex(
                name: "idx_credentials_tenant",
                table: "verifiable_credentials",
                column: "tenant_id");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "verifiable_credentials");

            migrationBuilder.DropTable(
                name: "credential_definitions");

            migrationBuilder.DropTable(
                name: "credential_schemas");

            migrationBuilder.DropTable(
                name: "dids");
        }
    }
}

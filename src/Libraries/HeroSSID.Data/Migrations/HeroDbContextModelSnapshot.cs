// <auto-generated />
using System;
using HeroSSID.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HeroSSID.Data.Migrations
{
    [DbContext(typeof(HeroDbContext))]
    partial class HeroDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HeroSSID.Data.Entities.CredentialDefinitionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("IssuerDidId")
                        .HasColumnType("uuid")
                        .HasColumnName("issuer_did_id");

                    b.Property<string>("LedgerCredDefId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ledger_cred_def_id");

                    b.Property<Guid>("SchemaId")
                        .HasColumnType("uuid")
                        .HasColumnName("schema_id");

                    b.Property<bool>("SupportsRevocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("supports_revocation");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("IssuerDidId")
                        .HasDatabaseName("idx_cred_defs_issuer");

                    b.HasIndex("LedgerCredDefId")
                        .IsUnique()
                        .HasDatabaseName("idx_cred_defs_ledger_id");

                    b.HasIndex("SchemaId")
                        .HasDatabaseName("idx_cred_defs_schema");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_cred_defs_tenant");

                    b.ToTable("credential_definitions", (string)null);
                });

            modelBuilder.Entity("HeroSSID.Data.Entities.CredentialSchemaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<string[]>("Attributes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("attributes");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("LedgerSchemaId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ledger_schema_id");

                    b.Property<Guid>("PublisherDidId")
                        .HasColumnType("uuid")
                        .HasColumnName("publisher_did_id");

                    b.Property<string>("SchemaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("schema_name");

                    b.Property<string>("SchemaVersion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("schema_version");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("LedgerSchemaId")
                        .IsUnique()
                        .HasDatabaseName("idx_schemas_ledger_id");

                    b.HasIndex("PublisherDidId")
                        .HasDatabaseName("idx_schemas_publisher");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_schemas_tenant");

                    b.HasIndex("SchemaName", "SchemaVersion")
                        .HasDatabaseName("idx_schemas_name_version");

                    b.ToTable("credential_schemas", null, t =>
                        {
                            t.HasCheckConstraint("chk_schema_version_format", "schema_version ~ '^\\d+\\.\\d+(\\.\\d+)?$'");
                        });
                });

            modelBuilder.Entity("HeroSSID.Data.Entities.DidEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DidDocumentJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("did_document_json");

                    b.Property<string>("DidIdentifier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("did_identifier");

                    b.Property<byte[]>("PrivateKeyEd25519Encrypted")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("private_key_ed25519_encrypted");

                    b.Property<byte[]>("PublicKeyEd25519")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("public_key_ed25519");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("active")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("DidIdentifier")
                        .IsUnique()
                        .HasDatabaseName("idx_dids_identifier");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_dids_status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_dids_tenant");

                    b.ToTable("dids", null, t =>
                        {
                            t.HasCheckConstraint("chk_did_status", "status IN ('active', 'deactivated')");
                        });
                });

            modelBuilder.Entity("HeroSSID.Data.Entities.VerifiableCredentialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CredentialDefinitionId")
                        .HasColumnType("uuid")
                        .HasColumnName("credential_definition_id");

                    b.Property<string>("CredentialJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("credential_json");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("HolderDidId")
                        .HasColumnType("uuid")
                        .HasColumnName("holder_did_id");

                    b.Property<DateTimeOffset>("IssuedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("issued_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("IssuerDidId")
                        .HasColumnType("uuid")
                        .HasColumnName("issuer_did_id");

                    b.Property<Guid>("SchemaId")
                        .HasColumnType("uuid")
                        .HasColumnName("schema_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("CredentialDefinitionId")
                        .HasDatabaseName("idx_credentials_cred_def");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("idx_credentials_expires_at")
                        .HasFilter("expires_at IS NOT NULL");

                    b.HasIndex("HolderDidId")
                        .HasDatabaseName("idx_credentials_holder");

                    b.HasIndex("IssuedAt")
                        .IsDescending()
                        .HasDatabaseName("idx_credentials_issued_at");

                    b.HasIndex("IssuerDidId")
                        .HasDatabaseName("idx_credentials_issuer");

                    b.HasIndex("SchemaId")
                        .HasDatabaseName("idx_credentials_schema");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_credentials_tenant");

                    b.ToTable("verifiable_credentials", null, t =>
                        {
                            t.HasCheckConstraint("chk_credentials_expiration", "expires_at IS NULL OR expires_at > issued_at");
                        });
                });

            modelBuilder.Entity("HeroSSID.Data.Entities.CredentialDefinitionEntity", b =>
                {
                    b.HasOne("HeroSSID.Data.Entities.DidEntity", "IssuerDid")
                        .WithMany("CredentialDefinitions")
                        .HasForeignKey("IssuerDidId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cred_defs_issuer");

                    b.HasOne("HeroSSID.Data.Entities.CredentialSchemaEntity", "Schema")
                        .WithMany("CredentialDefinitions")
                        .HasForeignKey("SchemaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cred_defs_schema");

                    b.Navigation("IssuerDid");

                    b.Navigation("Schema");
                });

            modelBuilder.Entity("HeroSSID.Data.Entities.CredentialSchemaEntity", b =>
                {
                    b.HasOne("HeroSSID.Data.Entities.DidEntity", "PublisherDid")
                        .WithMany("PublishedSchemas")
                        .HasForeignKey("PublisherDidId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_schemas_publisher");

                    b.Navigation("PublisherDid");
                });

            modelBuilder.Entity("HeroSSID.Data.Entities.VerifiableCredentialEntity", b =>
                {
                    b.HasOne("HeroSSID.Data.Entities.CredentialDefinitionEntity", "CredentialDefinition")
                        .WithMany("Credentials")
                        .HasForeignKey("CredentialDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_credentials_cred_def");

                    b.HasOne("HeroSSID.Data.Entities.DidEntity", "HolderDid")
                        .WithMany("HeldCredentials")
                        .HasForeignKey("HolderDidId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_credentials_holder");

                    b.HasOne("HeroSSID.Data.Entities.DidEntity", "IssuerDid")
                        .WithMany("IssuedCredentials")
                        .HasForeignKey("IssuerDidId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_credentials_issuer");

                    b.HasOne("HeroSSID.Data.Entities.CredentialSchemaEntity", "Schema")
                        .WithMany("Credentials")
                        .HasForeignKey("SchemaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_credentials_schema");

                    b.Navigation("CredentialDefinition");

                    b.Navigation("HolderDid");

                    b.Navigation("IssuerDid");

                    b.Navigation("Schema");
                });

            modelBuilder.Entity("HeroSSID.Data.Entities.CredentialDefinitionEntity", b =>
                {
                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("HeroSSID.Data.Entities.CredentialSchemaEntity", b =>
                {
                    b.Navigation("CredentialDefinitions");

                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("HeroSSID.Data.Entities.DidEntity", b =>
                {
                    b.Navigation("CredentialDefinitions");

                    b.Navigation("HeldCredentials");

                    b.Navigation("IssuedCredentials");

                    b.Navigation("PublishedSchemas");
                });
#pragma warning restore 612, 618
        }
    }
}

name: Release and Publish NuGet Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  id-token: write  # Required for OIDC authentication with NuGet.org
  contents: read

jobs:
  version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}

    steps:
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          else
            VERSION="${{ inputs.version }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

  build:
    name: Build
    needs: version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for versioning

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore /p:Version=${{ needs.version.outputs.version }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/bin/Release/**
            **/obj/Release/**
          retention-days: 1

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    env:
      HEROSSID_SKIP_ENTROPY_CHECK: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore /p:Version=${{ needs.version.outputs.version }}

      - name: Run all tests
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/TestResults/**'
          retention-days: 7

  security-scan:
    name: Security Scan
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run dependency vulnerability scan
        run: |
          dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerability-report.txt
          if grep -q "has the following vulnerable packages" vulnerability-report.txt; then
            echo "::error::Vulnerable packages detected! Release blocked."
            cat vulnerability-report.txt
            exit 1
          fi
          echo "No vulnerable packages detected."

      - name: Install security scanning tools
        run: |
          dotnet tool install --global security-scan --version 5.6.7 || true

      - name: Run security analysis
        run: |
          security-scan HeroSSID.sln --excl-proj=**/*Tests.csproj --verbose || echo "Security scan completed"

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            vulnerability-report.txt
            SecurityReport.html
          retention-days: 90

  release:
    name: Package NuGet Libraries
    needs: [version, security-scan]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore /p:Version=${{ needs.version.outputs.version }}

      - name: Pack HeroSSID.Core
        run: |
          dotnet pack src/Libraries/HeroSSID.Core/HeroSSID.Core.csproj \
            --configuration Release \
            --no-build \
            --output ./packages \
            /p:PackageVersion=${{ needs.version.outputs.version }}

      - name: Pack HeroSSID.DidOperations
        run: |
          dotnet pack src/Libraries/HeroSSID.DidOperations/HeroSSID.DidOperations.csproj \
            --configuration Release \
            --no-build \
            --output ./packages \
            /p:PackageVersion=${{ needs.version.outputs.version }}

      - name: Pack HeroSSID.Credentials
        run: |
          dotnet pack src/Libraries/HeroSSID.Credentials/HeroSSID.Credentials.csproj \
            --configuration Release \
            --no-build \
            --output ./packages \
            /p:PackageVersion=${{ needs.version.outputs.version }}

      - name: Pack HeroSSID.Data
        run: |
          dotnet pack src/Libraries/HeroSSID.Data/HeroSSID.Data.csproj \
            --configuration Release \
            --no-build \
            --output ./packages \
            /p:PackageVersion=${{ needs.version.outputs.version }}

      - name: Pack HeroSSID.Observability
        run: |
          dotnet pack src/Libraries/HeroSSID.Observability/HeroSSID.Observability.csproj \
            --configuration Release \
            --no-build \
            --output ./packages \
            /p:PackageVersion=${{ needs.version.outputs.version }}

      - name: Upload NuGet packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./packages/*.nupkg
          retention-days: 30

  publish:
    name: Publish to NuGet.org
    needs: [version, release]
    runs-on: ubuntu-latest
    environment: production  # Require manual approval for production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Download NuGet packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./packages

      - name: NuGet login (OIDC â†’ temporary API key)
        uses: NuGet/login@v1
        id: nuget-login
        with:
          user: ${{ secrets.NUGET_USERNAME }}

      - name: Publish to NuGet.org using Trusted Publishing
        run: |
          dotnet nuget push "./packages/*.nupkg" \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ steps.nuget-login.outputs.NUGET_API_KEY }} \
            --skip-duplicate
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1

      - name: Create release summary
        run: |
          echo "## Published Packages - Version ${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following packages have been published to NuGet.org:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          ls -1 ./packages/*.nupkg | xargs -I {} basename {} | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
